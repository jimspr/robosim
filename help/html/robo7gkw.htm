<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>use-kinematics-lisp</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="use-kinematics-lisp">
</OBJECT>

<P><A NAME="id_use_kinematics_lisp"></A><B>(use-kinematics-lisp <I>fn1 fn2 fn3 fn4</I>)</B></P>

<P>Allows specification of inverse kinematics in LISP routines. These four functions are required to implement inverse kinematics in LISP. Unlike the <A HREF="robo8awj.htm"><B>use-kinematics</B></A> function, this function must be executed for each set of inverse kinematics functions.The following example is simplistic and only shows what functions are required.</P>
<PRE><CODE>(defun test-compute-parameters nil
    t
)
; get-num-solutions returns number of solutions
(defun test-get-num-solutions nil
    8
)
(defun test-get-degrees-of-freedom nil
    6
)
; inverse-kinematics returns nil if out of range
; otherwise returns list of all solutions
(defun test-inverse-kinematics (params target)
    (list 
        (list 0 0 0 0 0 0)
        (list 0 0 0 0 0 0)
        (list 0 0 0 0 0 0)
        (list 0 0 0 0 0 0)
        (list 0 0 0 0 0 0)
        (list 0 0 0 0 0 0)
        (list 0 0 0 0 0 0)
        (list 0 0 0 0 0 0)
    )
)
(use-kinematics-lisp #'test-inverse #'test-getnumsol #'test-getdegreesfreedom #'test-computeparameters) =&gt; t</CODE></PRE>

</BODY>
</HTML>
